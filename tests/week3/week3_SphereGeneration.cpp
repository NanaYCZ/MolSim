#include <gtest/gtest.h>
#include "particleModel/CellContainer.h"
#include "inputHandling/FileReader.h"
#include "inputHandling/generators/SphereGeneration.h"





/**
 * Tests currently don't work because ParticleContainer removed
 * 
 * 
 * 
 * 
*/


/**
 * @brief Tests the SphereGenerator. Two spheres are generated in the 2D mode and two
 *        spheres are generated in the 3D mode. Check that they have the right dimensions
 *        by looking at if the position values of particles within are set to 0.0.
 *        sphere with parameters x_array, v_array, mass, radius, mesh width, sigma, epsilon
 */
TEST (sphereGeneration,test_sphereGeneration_dimension){
//     FileReader::SphereData s1{{0, 0, 0}, {0, 0, 0}, 1, 2, 1.1225, 1, 5};
//     FileReader::SphereData s2{{3, 0, 5}, {0, 5, 0}, 1, 2, 1.1225, 1, 5};
//     FileReader::SphereData s3{{0, 0, 0}, {0, 0, -1}, 1, 2, 1.1225, 1, 5};
//     FileReader::SphereData s4{{0, 0, 0}, {0, 1, 0}, 1, 2, 1.1225, 1, 5};

//     std::list<FileReader::SphereData> spheres{s1, s2};

//     CellContainer particleContainer(100,100,100,3.0,3.0); //i changed it to CellContainer

//     addSpheres(particleContainer, spheres, 2);
//    // check that the z dimention of the spheres is set to 0
//     for(int i = 0; i < particleContainer.size(); i++) {
//     ASSERT_EQ(particleContainer[i].getX().at(2), 0.0);
//     }
//     spheres.remove(s1);
//     spheres.remove(s2);
//     spheres.push_back(s3);
//     spheres.push_back(s4);

//     addSpheres(particleContainer, spheres, 3);
//     bool correctDimA{false};
//     for(int i = 0; i < particleContainer.size(); i++) {
//         if(particleContainer[i].getX().at(2)!=0) {
//             correctDimA = true;
//         break;
//         }
//     }
//     ASSERT_TRUE(correctDimA);


}

/**
 * @brief Tests the number of particles generated by the sphere generator.
 *        Check that a 2DSphere with the radius of 2 has 13 particles inside
 *        as             *
 *                    *  *  *
 *                 *  *  *  *  *
 *                    *  *  *
 *                       *
 *       a 3DSphere with the radius of 2 has 13+9*2+1*2=33 particles,
 *       a 2D Sphere with the radius of 1 has 5 particles as   *
 *                                                          *  *  *
 *                                                             *
 *       a 3DSphere with the radius of 1 has 7 particles,
 *       and a 2DSphere with the radius of 15 should have particles with
 *       the number near phi*15^2=707, a tolerance of 2 is set.
 *       With multiple spheres the sum should also be correct.
 */
TEST (sphereGeneration,test_sphereGeneration_amount){
// FileReader::SphereData s1{{0, 0, 0}, {0, 0, 0}, 1, 2, 1.1225, 1, 5};
// FileReader::SphereData s2{{0, 0, 0}, {0, 0, 0}, 1, 2, 1.1225, 1, 5};
// FileReader::SphereData s3{{0, 0, 0}, {0, 0, 0}, 1, 1, 1.1225, 1, 5};
// FileReader::SphereData s4{{0, 0, 0}, {0, 0, 0}, 1, 1, 1.1225, 1, 5};
// FileReader::SphereData s5{{0, 0, 0}, {0, 0, 0}, 1, 15, 1.1225, 1, 5};
//i changed it to CellContainer
// CellContainer particleContainer1;
// CellContainer particleContainer2;
// CellContainer particleContainer3;
// CellContainer particleContainer4;
// CellContainer particleContainer5;
// CellContainer particleContainer2DSum;
// CellContainer particleContainer3DSum;
// std::list<FileReader::SphereData> spheres1{s1};
// std::list<FileReader::SphereData> spheres2{s2};
// std::list<FileReader::SphereData> spheres3{s3};
// std::list<FileReader::SphereData> spheres4{s4};
// std::list<FileReader::SphereData> spheres5{s5};
// std::list<FileReader::SphereData> spheres2DSum{s1,s3,s5};
// std::list<FileReader::SphereData> spheres3DSum{s2,s4};
// addSpheres(particleContainer1, spheres1, 2);
// addSpheres(particleContainer2, spheres2, 3);
// addSpheres(particleContainer3, spheres3, 2);
// addSpheres(particleContainer4, spheres4, 3);
// addSpheres(particleContainer5, spheres5, 2);
// addSpheres(particleContainer2DSum, spheres2DSum, 2);
// addSpheres(particleContainer3DSum, spheres3DSum, 3);
// ASSERT_EQ(particleContainer1.size(), 13);
// ASSERT_EQ(particleContainer2.size(), 33);
// ASSERT_EQ(particleContainer3.size(), 5);
// ASSERT_EQ(particleContainer4.size(), 7);
// ASSERT_NEAR(particleContainer5.size(), 707,2);
// ASSERT_NEAR(particleContainer2DSum.size(), 13+5+707,2);
// ASSERT_EQ(particleContainer3DSum.size(), 33+7);
}